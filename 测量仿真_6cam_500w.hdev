<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.2.0">
<procedure name="main">
<interface/>
<body>
<l>dev_update_off ()</l>
<l>dev_update_off ()</l>
<c></c>
<c></c>
<l>* RadiusMax:=800/2</l>
<c></c>
<c>*-------圆管</c>
<l>Radius:=800/2</l>
<l>create_pose(-0, 0, -0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose) </l>
<l>gen_cylinder_object_model_3d (Pose, Radius, -1000,1000 , RailModel_Tri)</l>
<c></c>
<l>* surface_normals_object_model_3d (RailModel_Tri, 'mls', 'mls_force_inwards', 'true', ObjectModel3DNormals)</l>
<l>* triangulate_object_model_3d (ObjectModel3DNormals, 'greedy', 'greedy_remove_small_surfaces', 200, RailModel_Tri, Information)</l>
<l>* triangulate_object_model_3d (RailModel_Tri, 'xyz_mapping', [], [], RailModel_Tri, Information)</l>
<c></c>
<c>*添加偏移量</c>
<l>*     create_pose(-50, -50, -0, 0, 0, 0, 'Rp+T', 'gba', 'point', Pose) </l>
<l>*     rigid_trans_object_model_3d(RailModel_Tri, Pose, RailModel_Tri)</l>
<c></c>
<c>* 计算激光切平面</c>
<l>intersect_plane_object_model_3d (RailModel_Tri, [0,0,0,0,0,0,0], ObjectModel3D_LaserCut)</l>
<c>*激光器的位置和朝向</c>
<l>Laser_Px:=[0,0,0,0,0,0]</l>
<l>Laser_Py:=[0,0,0,0,0,0]</l>
<l>Laser_Pz:=[0,0,0,0,0,0]</l>
<c>*相机参数</c>
<l>focal := 9</l>
<l>im_width := 2448</l>
<l>im_height := 2048</l>
<l>pixel_size := 3.45*0.001</l>
<l>CamParam := [focal,0,pixel_size,pixel_size,im_width/2,im_height/2,im_width,im_height]</l>
<c>*窗口设置</c>
<l>im_dis_zoom := 0.15</l>
<l>dis_width := im_width*im_dis_zoom</l>
<l>dis_height := im_height*im_dis_zoom</l>
<l>dev_open_window (0, 0, dis_width, dis_height, 'white', WindowHandle_C1)</l>
<l>dev_open_window (0, dis_width, dis_width, dis_height, 'white', WindowHandle_C2)</l>
<l>dev_open_window (0, dis_width*2, dis_width, dis_height, 'white', WindowHandle_C3)</l>
<l>dev_open_window (0, dis_width*3, dis_width, dis_height, 'white', WindowHandle_C4)</l>
<l>dev_open_window (0, dis_width*4, dis_width, dis_height, 'white', WindowHandle_C5)</l>
<l>dev_open_window (0, dis_width*5, dis_width, dis_height, 'white', WindowHandle_C6)</l>
<l>dev_open_window (0, dis_width*6, dis_width, dis_height, 'black', WindowHandle_Contour)</l>
<c></c>
<l>dev_open_window (dis_height+60, 0, dis_width, dis_height, 'white', WindowHandle_B1)</l>
<l>dev_open_window (dis_height+60, dis_width, dis_width, dis_height, 'white', WindowHandle_B2)</l>
<l>dev_open_window (dis_height+60, dis_width*2, dis_width, dis_height, 'white', WindowHandle_B3)</l>
<l>dev_open_window (dis_height+60, dis_width*3, dis_width, dis_height, 'white', WindowHandle_B4)</l>
<l>dev_open_window (dis_height+60, dis_width*4, dis_width, dis_height, 'white', WindowHandle_B5)</l>
<l>dev_open_window (dis_height+60, dis_width*5, dis_width, dis_height, 'white', WindowHandle_B6)</l>
<l>dev_open_window (dis_height+60, dis_width*6, dis_width, dis_height, 'white', WindowHandle_Output)</l>
<l>List_CWindowHandle:=[WindowHandle_C1,WindowHandle_C2,WindowHandle_C3,WindowHandle_C4,WindowHandle_C5,WindowHandle_C6]</l>
<l>List_BWindowHandle:=[WindowHandle_B1,WindowHandle_B2,WindowHandle_B3,WindowHandle_B4,WindowHandle_B5,WindowHandle_B6]</l>
<c>*相机位置和朝向</c>
<l>R:=1200</l>
<l>Camx:=R*0.5</l>
<l>Camy:=R*(sqrt(3))/2</l>
<l>Camz:=-1000</l>
<c></c>
<c></c>
<l>distance_z:=500</l>
<l>Cam_Px:=[Camx,-Camx,-R,-Camx,Camx,R]</l>
<l>Cam_Py:=[Camy,Camy,0,-Camy,-Camy,0]</l>
<l>Cam_Pz:=[Camz,Camz,Camz,Camz,Camz,Camz]</l>
<l>Cam_Lx:=[0,0,0,0,0,0]</l>
<l>Cam_Ly:=[0,0,0,0,0,0]</l>
<l>Cam_Lz:=[distance_z,distance_z,distance_z,distance_z,distance_z,distance_z]</l>
<l>Cam_rad:=[rad(-30),rad(30),rad(90),rad(-30),rad(30),rad(90)]</l>
<c>*模拟镜头的位置</c>
<l>Len_Px:=[Camx,-Camx,Camx,-Camx,R,-R]</l>
<l>Len_Py:=[Camy,Camy,-Camy,-Camy,0,0]</l>
<l>Len_Pz:=[Camz,Camz,Camz,Camz,Camz,Camz]</l>
<l>Len_Lx:=[0,0,0,0,0,0]</l>
<l>Len_Ly:=[0,0,0,0,0,0]</l>
<l>Len_Lz:=[distance_z,distance_z,distance_z,distance_z,distance_z,distance_z]</l>
<l>Len_rad:=[rad(60),rad(60),rad(60),rad(60),rad(60),rad(60)]</l>
<c>* 创建激光和相机</c>
<l>for i := 0 to |Cam_Px|-1 by 1</l>
<l>    create_cam_pose_look_at_point(Len_Px[i], Len_Py[i], Len_Pz[i], Len_Lx[i], Len_Ly[i], Len_Lz[i], '-y', Len_rad[i], LenPose.at(i))</l>
<l>    create_cam_pose_look_at_point(Cam_Px[i], Cam_Py[i], Cam_Pz[i], Cam_Lx[i], Cam_Ly[i], Cam_Lz[i], '-y', Cam_rad[i], CamPose.at(i))</l>
<l>    create_cam_pose_look_at_point(Laser_Px[i], Laser_Py[i], Laser_Pz[i], Laser_Px[i], Laser_Py[i], 1, '-y', 0, LaserPose.at(i))</l>
<l>endfor</l>
<c></c>
<c>*-----设备显示</c>
<l>Model3D_Lens := []</l>
<l>Model3D_Cams := []</l>
<l>Model3D_Lasers := []</l>
<l>for i := 0 to |Cam_Px|-1 by 1</l>
<l>    pose_invert(CamPose.at(i), PoseInvert)</l>
<l>    gen_box_object_model_3d(PoseInvert, 50, 50, 50, Model3D_Cam)</l>
<l>    Model3D_Cams := [Model3D_Cams,Model3D_Cam]</l>
<c>    </c>
<l>    pose_invert(LenPose.at(i), PoseLen)</l>
<l>    gen_cylinder_object_model_3d (PoseLen, 18, 25, 50, Model3D_Len)</l>
<l>    Model3D_Lens:=[Model3D_Lens,Model3D_Len]</l>
<c></c>
<l>    pose_invert(LaserPose.at(i), PoseInvert_Laser)</l>
<l>    gen_plane_object_model_3d(PoseInvert_Laser, [-1,-1,1,1]*500, [-1,1,1,-1]*500, Model3D_Laser)</l>
<l>    Model3D_Lasers := [Model3D_Lasers,Model3D_Laser]</l>
<l>endfor</l>
<l>intersect_plane_object_model_3d (RailModel_Tri, [0, 0, 0, 0, 0, 0, 0], Model3D_LaserCut)</l>
<c>* 三维显示窗体</c>
<l>dev_open_window (400, 0, 800, 600, 'black', Window_Model3D)</l>
<l>CamParam_win := [0.06,0,8.5e-006,8.5e-006,421,301,843,603]</l>
<l>Pose_win := [73.4303, 34.1463, 11643.1, 0.294151, 346.456, 346.329, 0]</l>
<l>GenParamName := ['colored','disp_pose','color_0','color_1','color_2','color_3','color_4','color_5','color_6','color_7']</l>
<l>GenParamValue := [12,'true','cyan','red','green','blue','blue','blue','blue','blue']</l>
<l>* visualize_object_model_3d (Window_Model3D, [RailModel_Tri,Model3D_LaserCut,Model3D_Cams,Model3D_Lasers,Model3D_Lens], \
                      CamParam_win, Pose_win, GenParamName, GenParamValue, [], [], [], Pose_Display)</l>
<c></c>
<c>* 建立sheet of light</c>
<l>gen_rectangle1 (ROI, 0, 0, im_height-1,im_width-1)</l>
<l>create_pose (0, 0, -5, 0, 0, 0, 'Rp+T', 'gba', 'point', MovementPose)</l>
<l>for id_Cam := 0 to |Cam_Px|-1 by 1</l>
<l>    create_sheet_of_light_model (ROI, ['min_gray','num_profiles'], [255,1], SheetOfLightHandle.at(id_Cam))</l>
<l>    set_sheet_of_light_param (SheetOfLightHandle.at(id_Cam), 'calibration', 'xyz')</l>
<l>    set_sheet_of_light_param (SheetOfLightHandle.at(id_Cam), 'scale', 'm')</l>
<l>    set_sheet_of_light_param (SheetOfLightHandle.at(id_Cam), 'camera_parameter', CamParam)</l>
<l>    set_sheet_of_light_param (SheetOfLightHandle.at(id_Cam), 'camera_pose', CamPose.at(id_Cam))</l>
<l>    set_sheet_of_light_param (SheetOfLightHandle.at(id_Cam), 'lightplane_pose', LaserPose.at(id_Cam))</l>
<l>    set_sheet_of_light_param (SheetOfLightHandle.at(id_Cam), 'movement_pose', MovementPose)</l>
<l>endfor</l>
<c></c>
<l>Coord_X:=[]</l>
<l>Coord_Y:=[]</l>
<l>Coord_Z:=[]</l>
<l>gen_empty_obj (List_XldPart)</l>
<l>for step_id:=0 to 100 by 1</l>
<c>        * 钢轨前进</c>
<l>    hom_mat3d_identity (HomMat3D)</l>
<l>    hom_mat3d_translate (HomMat3D, 0, 0, -step_id, HomMat3D)</l>
<l>    affine_trans_object_model_3d (RailModel_Tri, HomMat3D, model_rail_trans_temp)</l>
<l>    for id := 0 to |Cam_Px|-1 by 1</l>
<l>        Model3Ds := []</l>
<l>        for i:= -0.5 to 0.5 by 0.01</l>
<l>            intersect_plane_object_model_3d (model_rail_trans_temp, [0, 0, i, 0, 0, 0, 0], Model3D_LaserCut)</l>
<l>            Model3Ds:=[Model3Ds,Model3D_LaserCut]</l>
<l>        endfor</l>
<l>        union_object_model_3d (Model3Ds, 'points_surface', ObjectModel3D_LaserCut)</l>
<l>        render_object_model_3d (Image_Model3D,[model_rail_trans_temp, ObjectModel3D_LaserCut],CamParam, CamPose.at(id),['alpha_0','alpha_1','color_0','color_1'], [1,1,'blue','red'])   </l>
<l>        dev_set_window(List_BWindowHandle[id])</l>
<l>        dev_display(Image_Model3D)</l>
<c>        *模拟拍摄到的激光线照片</c>
<l>        decompose3(Image_Model3D, Image_R, Image_G, Image_B)</l>
<l>        sub_image(Image_R, Image_G, Image_Laser, 1, 0)</l>
<l>        measure_profile_sheet_of_light (Image_Laser, SheetOfLightHandle.at(id), [])</l>
<c>        </c>
<l>        write_image (Image_Laser, 'png', 0, 'Image/' + id + '/Image_'+id +'_' +step_id +'.png')</l>
<c>        </c>
<l>        get_sheet_of_light_result(ImgDisparity, SheetOfLightHandle.at(id), 'disparity')</l>
<c>        </c>
<l>        write_object(ImgDisparity, 'Disparity/' + id + '/Disparity_'+id +'_' +step_id +'.hobj')</l>
<c>        </c>
<l>        get_sheet_of_light_result_object_model_3d (SheetOfLightHandle.at(id), ObjectModel3DID) </l>
<l>        get_object_model_3d_params (ObjectModel3DID, 'point_coord_x', coord_x)</l>
<l>        get_object_model_3d_params (ObjectModel3DID, 'point_coord_y', coord_y)</l>
<l>        get_object_model_3d_params (ObjectModel3DID, 'point_coord_z', coord_z)</l>
<c>       </c>
<l>        gen_contour_polygon_xld (Xld_Part, coord_y, coord_x)</l>
<l>        Coord_X:=[Coord_X,coord_x]</l>
<l>        Coord_Y:=[Coord_Y,coord_y]</l>
<l>        Coord_Z:=[Coord_Z,coord_z]</l>
<l>        gen_contour_polygon_xld (Contour1, Coord_Y,Coord_X)</l>
<l>        concat_obj (List_XldPart, Xld_Part, List_XldPart)</l>
<l>*         dev_set_window (WindowHandle_Contour)</l>
<l>*         dev_display (List_XldPart)</l>
<l>        dev_set_window(List_CWindowHandle[id])</l>
<l>        dev_display(Image_Laser)</l>
<l>    endfor</l>
<l>endfor</l>
<c>*移动到世界坐标系中心</c>
<l>gen_contour_polygon_xld (Contour, Coord_Y, Coord_X)</l>
<l>area_center_points_xld (Contour, Area, Row, Column)</l>
<l>hom_mat2d_identity (HomMat2DIdentity)</l>
<l>hom_mat2d_translate (HomMat2DIdentity, -Row, -Column, HomMat2DTranslate)</l>
<l>affine_trans_contour_xld (Contour, Contour, HomMat2DTranslate)</l>
<l>affine_trans_contour_xld (List_XldPart, List_XldPart, HomMat2DTranslate)</l>
<l>dev_set_window (WindowHandle_Contour)</l>
<l>dev_display (List_XldPart)</l>
<l>fit_circle_contour_xld (Contour, 'algebraic', -1, 0, 0, 3, 2, Row1, Column1, Radius, StartPhi, EndPhi, PointOrder)</l>
<l>fit_ellipse_contour_xld (Contour, 'fitzgibbon', -1, 0, 0, 200, 3, 2, Row2, Column2, Phi, MaxRadius, MinRadius, StartPhi1, EndPhi1, PointOrder1)</l>
<l>diameter_xld (Contour, FirstExtremeRow, FirstExtremeColumn, SecondExtremeRow, SecondExtremeColumn, Diameter)</l>
<l>* disp_cross (WindowHandle_Contour, FirstExtremeRow, FirstExtremeColumn, 10, 0)</l>
<l>* disp_cross (WindowHandle_Contour, SecondExtremeRow, SecondExtremeColumn, 10, 0)</l>
<c></c>
<l>disp_message (WindowHandle_Output, '拟合圆的半径:'+Radius, 'window', 10, 12, 'black', 'true')</l>
<l>disp_message (WindowHandle_Output, '拟合椭圆最大半径:'+MaxRadius, 'window', 30, 12, 'black', 'true')</l>
<l>disp_message (WindowHandle_Output, '拟合椭圆最小半径:'+MinRadius, 'window', 50, 12, 'black', 'true')</l>
<l>disp_message (WindowHandle_Output, '轮廓的最大直径:'+Diameter, 'window', 70, 12, 'black', 'true')</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="gen_same_rail_from_proflie">
<interface>
<ic>
<par name="X" base_type="ctrl" dimension="0"/>
<par name="Y" base_type="ctrl" dimension="0"/>
<par name="num_profile" base_type="ctrl" dimension="0"/>
<par name="point_num" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ObjectModel3D" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* 初始化XYZ Map</c>
<l>gen_image_const (ImageX, 'real', |X|, num_profile)</l>
<l>gen_image_const (ImageY, 'real', |X|, num_profile)</l>
<l>gen_image_const (ImageZ, 'real', |X|, num_profile)</l>
<c>* </c>
<c>* 生成XYZ Map</c>
<l>for id := 0 to num_profile-1 by 1</l>
<c>    * </c>
<l>    tuple_gen_const (point_num, id, Rows)</l>
<l>    tuple_gen_sequence (0, point_num-1, 1, Cols)</l>
<c>    * </c>
<l>    set_grayval (ImageX, Rows, Cols, X)</l>
<l>    set_grayval (ImageY, Rows, Cols, Y)</l>
<l>    set_grayval (ImageZ, Rows, Cols, Rows*num_profile)</l>
<l>endfor</l>
<c>* </c>
<c>* 生成点云</c>
<l>xyz_to_object_model_3d (ImageX, ImageY, ImageZ, ObjectModel3D)</l>
<c>* 三角化</c>
<l>triangulate_object_model_3d (ObjectModel3D, 'xyz_mapping', [], [], ObjectModel3D, Information)</l>
<c>* 模拟钢轨长度</c>
<l>return ()</l>
</body>
<docu id="gen_same_rail_from_proflie">
<parameters>
<parameter id="ObjectModel3D"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="num_profile"/>
<parameter id="point_num"/>
</parameters>
</docu>
</procedure>
<procedure name="Cal_Laser_Pose">
<interface>
<ic>
<par name="laser_Pos_X" base_type="ctrl" dimension="0"/>
<par name="laser_Pos_Y" base_type="ctrl" dimension="0"/>
<par name="laser_LookAt_X" base_type="ctrl" dimension="0"/>
<par name="laser_LookAt_Y" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="LaserPose" base_type="ctrl" dimension="0"/>
<par name="LaserPlanePose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>create_cam_pose_look_at_point (laser_Pos_X, laser_Pos_Y, 0, laser_LookAt_X, laser_LookAt_Y, 0, '-y', 0, LaserPose)</l>
<l>pose_to_hom_mat3d (LaserPose, HomMat3D)</l>
<l>hom_mat3d_rotate (HomMat3D, rad(90), 'y', 0, 0, 0, HomMat3D)</l>
<l>hom_mat3d_to_pose (HomMat3D, LaserPlanePose)</l>
<l>return ()</l>
</body>
<docu id="Cal_Laser_Pose">
<parameters>
<parameter id="LaserPlanePose"/>
<parameter id="LaserPose"/>
<parameter id="laser_LookAt_X"/>
<parameter id="laser_LookAt_Y"/>
<parameter id="laser_Pos_X"/>
<parameter id="laser_Pos_Y"/>
</parameters>
</docu>
</procedure>
<procedure name="Xld_Div">
<interface>
<io>
<par name="Contour_Inter" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="xld_divs" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>get_contour_xld (Contour_Inter, Row, Col)</l>
<l>id_split := [0]</l>
<l>diff_rows := []</l>
<l>div_threshold := 6</l>
<l>for i := 0 to |Row|-2 by 1</l>
<l>    diff_row := abs( Row[i+1]-Row[i])</l>
<c>    * </c>
<l>    if (diff_row &gt; div_threshold)</l>
<l>        id_split := [id_split,i]</l>
<l>        diff_rows := [diff_rows,diff_row]</l>
<l>    endif</l>
<l>endfor</l>
<l>id_split := [id_split,|Row|-1]</l>
<c>* </c>
<l>gen_empty_obj (xld_divs)</l>
<l>for i := 0 to |id_split|-2 by 1</l>
<l>    gen_contour_polygon_xld (xld_div, Row[id_split[i]+1:id_split[i+1]], Col[id_split[i]+1:id_split[i+1]])</l>
<c>    * </c>
<l>    tuple_gen_const (|Row[id_split[i]+1:id_split[i+1]]|, 0.00001, radius)</l>
<l>    gen_contour_polygon_rounded_xld (xld_div, Row[id_split[i]+1:id_split[i+1]], Col[id_split[i]+1:id_split[i+1]], radius, 0.1)</l>
<c>    * </c>
<l>    concat_obj (xld_divs, xld_div, xld_divs)</l>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="Xld_Div">
<parameters>
<parameter id="Contour_Inter"/>
<parameter id="xld_divs"/>
</parameters>
</docu>
</procedure>
<procedure name="Cal_Laser_Rail_CrossXld">
<interface>
<io>
<par name="Rail_Xld" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Cross_Xlds" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Pos_X" base_type="ctrl" dimension="0"/>
<par name="Pos_Y" base_type="ctrl" dimension="0"/>
<par name="LookAt_X" base_type="ctrl" dimension="0"/>
<par name="LookAt_Y" base_type="ctrl" dimension="0"/>
<par name="Divergence" base_type="ctrl" dimension="0"/>
<par name="Step" base_type="ctrl" dimension="0"/>
<par name="Win_Laser_Cross" base_type="ctrl" dimension="0"/>
<par name="laser_Color" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c>* 激光中心线</c>
<l>gen_contour_polygon_xld (line_mid, [Pos_Y, LookAt_Y], [Pos_X, LookAt_X])</l>
<c>* </c>
<c>* 激光线左边沿</c>
<l>hom_mat2d_identity (HomMat2D)</l>
<l>hom_mat2d_scale (HomMat2D, 2, 2, Pos_Y, Pos_X, HomMat2D)</l>
<l>hom_mat2d_rotate (HomMat2D, rad(real(Divergence)/2.0), Pos_Y, Pos_X, HomMat2D)</l>
<l>affine_trans_contour_xld (line_mid, line_left, HomMat2D)</l>
<l>* dev_display (line_left)</l>
<c>* </c>
<l>Cross_Xs := []</l>
<l>Cross_Ys := []</l>
<l>for i := 0 to Step-1 by 1</l>
<l>    hom_mat2d_identity (HomMat2D)</l>
<l>    hom_mat2d_rotate (HomMat2D, -rad(real(Divergence)/(Step-1.0))*i, Pos_Y, Pos_X, HomMat2D)</l>
<l>    affine_trans_contour_xld (line_left, line_Out, HomMat2D)</l>
<c>    * </c>
<c>    * 计算焦点</c>
<l>    intersection_contours_xld (Rail_Xld, line_Out, 'mutual', ys, xs, IsOverlapping1)</l>
<c>    * </c>
<l>    if (|ys| != 0)</l>
<c>        * </c>
<l>        tuple_gen_const (|ys|, Pos_Y, Pos_Ys)</l>
<l>        tuple_gen_const (|ys|, Pos_X, Pos_Xs)</l>
<l>        distance_pp (Pos_Ys, Pos_Xs, ys, xs, Distance)</l>
<c>        * </c>
<l>        tuple_sort_index (Distance, Sort_Id)</l>
<c>        * </c>
<l>        Cross_Xs := [Cross_Xs,xs[Sort_Id[0]]]</l>
<l>        Cross_Ys := [Cross_Ys,ys[Sort_Id[0]]]</l>
<l>    endif</l>
<c>    * </c>
<c>    * 显示</c>
<l>    if (i==0 or i == Step-1)</l>
<l>        dev_set_window (Win_Laser_Cross)</l>
<l>        dev_set_color (laser_Color)</l>
<l>        dev_display (line_Out)</l>
<l>    endif</l>
<c>    * </c>
<l>endfor</l>
<c>* </c>
<l>* tuple_gen_const (|Cross_Ys|, 5, rs)</l>
<l>* disp_circle (3600, Cross_Ys, Cross_Xs, rs)</l>
<c>* </c>
<c>* </c>
<l>gen_contour_polygon_xld (Cross_Xld, Cross_Ys, Cross_Xs)</l>
<c>* </c>
<c>* 分割</c>
<l>Xld_Div (Cross_Xld, Cross_Xlds)</l>
<l>return ()</l>
</body>
<docu id="Cal_Laser_Rail_CrossXld">
<parameters>
<parameter id="Cross_Xlds"/>
<parameter id="Divergence"/>
<parameter id="LookAt_X"/>
<parameter id="LookAt_Y"/>
<parameter id="Pos_X"/>
<parameter id="Pos_Y"/>
<parameter id="Rail_Xld"/>
<parameter id="Step"/>
<parameter id="Win_Laser_Cross"/>
<parameter id="laser_Color"/>
</parameters>
</docu>
</procedure>
<procedure name="Xld_To_Model3d">
<interface>
<io>
<par name="Cross_Xlds" base_type="iconic" dimension="0"/>
</io>
<oc>
<par name="Model3d_CrossLine" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>count_obj (Cross_Xlds, Number)</l>
<c>* </c>
<l>Model3d_CrossLines := []</l>
<l>for id := 1 to Number by 1</l>
<l>    select_obj (Cross_Xlds, Cross_Xld, id)</l>
<c>    * </c>
<l>    get_contour_xld (Cross_Xld, Ys, Xs)</l>
<l>    tuple_gen_const (|Xs|, 0, Zs)</l>
<c>    * </c>
<l>    gen_object_model_3d_from_points (Xs, Ys, Zs, Model3D)</l>
<c>    * </c>
<l>    line_ids := []</l>
<l>    for Index := 0 to |Xs|-2 by 1</l>
<l>        line_ids := [line_ids,2,Index,Index+1]</l>
<l>    endfor</l>
<l>    set_object_model_3d_attrib (Model3D, 'lines', [], line_ids, Model3D)</l>
<c>    * </c>
<l>    Model3d_CrossLines := [Model3d_CrossLines,Model3D]</l>
<l>endfor</l>
<l>union_object_model_3d (Model3d_CrossLines, 'points_surface', Model3d_CrossLine)</l>
<l>return ()</l>
</body>
<docu id="Xld_To_Model3d">
<parameters>
<parameter id="Cross_Xlds"/>
<parameter id="Model3d_CrossLine"/>
</parameters>
</docu>
</procedure>
<procedure name="Cal_Laser_Image">
<interface>
<io>
<par name="Rail_Xld" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Image" base_type="iconic" dimension="0"/>
<par name="Cross_Xlds" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Model3D_Rail" base_type="ctrl" dimension="0"/>
<par name="Cam_Pos_X" base_type="ctrl" dimension="0"/>
<par name="Cam_Pos_Y" base_type="ctrl" dimension="0"/>
<par name="Cam_Pos_Z" base_type="ctrl" dimension="0"/>
<par name="Cam_LookAt_X" base_type="ctrl" dimension="0"/>
<par name="Cam_LookAt_Y" base_type="ctrl" dimension="0"/>
<par name="Cam_LookAt_Z" base_type="ctrl" dimension="0"/>
<par name="Cam_Roll" base_type="ctrl" dimension="0"/>
<par name="CamParam" base_type="ctrl" dimension="0"/>
<par name="laser_Pos_X" base_type="ctrl" dimension="0"/>
<par name="laser_Pos_Y" base_type="ctrl" dimension="0"/>
<par name="laser_LookAt_X" base_type="ctrl" dimension="0"/>
<par name="laser_LookAt_Y" base_type="ctrl" dimension="0"/>
<par name="laser_Divergence" base_type="ctrl" dimension="0"/>
<par name="Laser_Step" base_type="ctrl" dimension="0"/>
<par name="laser_Color" base_type="ctrl" dimension="0"/>
<par name="Win_Laser_Cross" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="CamPose" base_type="ctrl" dimension="0"/>
<par name="LaserPose" base_type="ctrl" dimension="0"/>
<par name="LaserPlanePose" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>* 相机Pose</c>
<l>create_cam_pose_look_at_point (Cam_Pos_X, Cam_Pos_Y, Cam_Pos_Z, Cam_LookAt_X, Cam_LookAt_Y, Cam_LookAt_Z, '-y', Cam_Roll, CamPose)</l>
<c>* </c>
<c>* 激光Pose</c>
<l>Cal_Laser_Pose (laser_Pos_X, laser_Pos_Y, laser_LookAt_X, laser_LookAt_Y, LaserPose, LaserPlanePose)</l>
<c>* </c>
<c>* 计算激光与钢轨的交叉线</c>
<l>Cal_Laser_Rail_CrossXld (Rail_Xld, Cross_Xlds, laser_Pos_X, laser_Pos_Y, laser_LookAt_X, laser_LookAt_Y, laser_Divergence, Laser_Step, Win_Laser_Cross, laser_Color)</l>
<c>* </c>
<c>* 交叉线 转 Model3d</c>
<l>Xld_To_Model3d (Cross_Xlds, Model3d_CrossLine)</l>
<c>* </c>
<c>* 渲染图像</c>
<l>GenParamName := ['color_0','color_1','alpha_1']</l>
<l>GenParamValue := ['black','white',1]</l>
<l>* GenParamValue := ['gray','red',1]</l>
<l>render_object_model_3d (Image, [Model3D_Rail, Model3d_CrossLine], CamParam, CamPose, GenParamName, GenParamValue)</l>
<c>* </c>
<l>return ()</l>
</body>
<docu id="Cal_Laser_Image">
<parameters>
<parameter id="CamParam"/>
<parameter id="CamPose"/>
<parameter id="Cam_LookAt_X"/>
<parameter id="Cam_LookAt_Y"/>
<parameter id="Cam_LookAt_Z"/>
<parameter id="Cam_Pos_X"/>
<parameter id="Cam_Pos_Y"/>
<parameter id="Cam_Pos_Z"/>
<parameter id="Cam_Roll"/>
<parameter id="Cross_Xlds"/>
<parameter id="Image"/>
<parameter id="LaserPlanePose"/>
<parameter id="LaserPose"/>
<parameter id="Laser_Step"/>
<parameter id="Model3D_Rail"/>
<parameter id="Rail_Xld"/>
<parameter id="Win_Laser_Cross"/>
<parameter id="laser_Color"/>
<parameter id="laser_Divergence"/>
<parameter id="laser_LookAt_X"/>
<parameter id="laser_LookAt_Y"/>
<parameter id="laser_Pos_X"/>
<parameter id="laser_Pos_Y"/>
</parameters>
</docu>
</procedure>
<procedure name="xld_div">
<interface>
<io>
<par name="Contour_Inter" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="xld_divs" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>get_contour_xld (Contour_Inter, Row, Col)</l>
<l>for i := 0 to |Row| by 1</l>
<l>    distance_pp (Row[i], Col[i], Row[i+1], Col[i+1], Distance)</l>
<l>    if (Distance&gt;5)</l>
<l>        ind := i</l>
<l>        break</l>
<l>    endif</l>
<l>endfor</l>
<l>gen_empty_obj (xld_divs)</l>
<l>tuple_select_range (Row, 0, ind, Row1)</l>
<l>tuple_select_range (Col, 0, ind, Col1)</l>
<l>tuple_select_range (Row, ind+1, |Row|-1, Row2)</l>
<l>tuple_select_range (Col, ind+1, |Row|-1, Col2)</l>
<l>gen_contour_polygon_xld (Contour1, Row1, Col1)</l>
<l>concat_obj (xld_divs, Contour1, xld_divs)</l>
<l>gen_contour_polygon_xld (Contour2, Row2, Col2)</l>
<l>concat_obj (xld_divs, Contour2, xld_divs)</l>
<l>return ()</l>
</body>
<docu id="xld_div">
<parameters>
<parameter id="Contour_Inter"/>
<parameter id="xld_divs"/>
</parameters>
</docu>
</procedure>
<procedure name="Cal_LaserImage">
<interface>
<oo>
<par name="Images" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="CamParam" base_type="ctrl" dimension="0"/>
<par name="CamPose" base_type="ctrl" dimension="1"/>
<par name="SubPixelFactor" base_type="ctrl" dimension="0"/>
<par name="RailModel3D" base_type="ctrl" dimension="0"/>
<par name="Model3D_LaserCut" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<l>im_width := CamParam[6]</l>
<l>im_height := CamParam[7]</l>
<l>gen_empty_obj (Images)</l>
<l>for id_Cam := 0 to CamPose.length()-1 by 1</l>
<c>    * 计算理论精度  像素点转到世界坐标系下z=0面上的坐标</c>
<l>*     image_points_to_world_plane (CamParam, CamPose.at(id_Cam), (im_height/2)+1.0/SubPixelFactor, im_width/2, 'm', pos_x, pos_y)</l>
<l>*     error1 := pos_x * pos_x + pos_y * pos_y</l>
<l>*     tuple_sqrt (error1, error1)</l>
<c>    * </c>
<l>*     image_points_to_world_plane (CamParam, CamPose.at(id_Cam), (im_height/2)+1.0/SubPixelFactor, im_width/2, 'm', pos_x, pos_y)</l>
<l>*     error2 := pos_x * pos_x + pos_y * pos_y</l>
<l>*     tuple_sqrt (error2, error2)</l>
<c>    * 渲染图像</c>
<l>    GenParamName := ['color_0','color_1']</l>
<l>    GenParamValue := ['black','white']</l>
<l>    render_object_model_3d (Image, [RailModel3D, Model3D_LaserCut], CamParam, CamPose.at(id_Cam), GenParamName, GenParamValue)</l>
<l>    concat_obj (Images, Image, Images)</l>
<l>endfor</l>
<l>return ()</l>
</body>
<docu id="Cal_LaserImage">
<parameters>
<parameter id="CamParam"/>
<parameter id="CamPose"/>
<parameter id="Images"/>
<parameter id="Model3D_LaserCut"/>
<parameter id="RailModel3D"/>
<parameter id="SubPixelFactor"/>
</parameters>
</docu>
</procedure>
<procedure name="Model3D_ReduceShake_Rough">
<interface>
<io>
<par name="Title_MapX" base_type="iconic" dimension="0"/>
<par name="Title_MapY" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Title_MapX_Adjust" base_type="iconic" dimension="0"/>
<par name="Title_MapY_Adjust" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<c></c>
<l>get_image_size (Title_MapX, Width, Height)</l>
<c></c>
<c>* 粗调</c>
<l>gen_image_const (Title_MapX_Adjust, 'real', Width, Height)</l>
<l>gen_image_const (Title_MapY_Adjust, 'real', Width, Height)</l>
<c></c>
<l>for Id_Row := 0 to Height - 1 by 1</l>
<c>    * 获取轮廓有效点</c>
<l>    gen_rectangle1 (Roi_Row, Id_Row, 0, Id_Row, Width-1)</l>
<l>    intersection (Roi_Row, Title_MapX, Roi_Row)</l>
<l>    get_region_points (Roi_Row, Rows, Columns)</l>
<l>    get_grayval (Title_MapX, Rows, Columns, X)</l>
<l>    get_grayval (Title_MapY, Rows, Columns, Y)</l>
<c>    * 生成轮廓</c>
<l>    gen_contour_polygon_xld (Contour, Y, X)</l>
<c>    * 最小外切矩形法 粗调</c>
<l>    area_center_xld (Contour, Area, OffsetY, OffsetX, PointOrder)</l>
<l>    orientation_xld (Contour, Phi)</l>
<l>    if (Phi &gt; 0)</l>
<l>        Phi := -3.1425926 + Phi</l>
<l>    endif</l>
<c>    * 变换</c>
<l>    hom_mat2d_identity (HomMat2D)</l>
<l>    hom_mat2d_translate (HomMat2D, -OffsetY, -OffsetX, HomMat2D)</l>
<l>    hom_mat2d_rotate (HomMat2D, -Phi+rad(-90), 0, 0, HomMat2D)</l>
<l>    affine_trans_contour_xld (Contour, Contour_Trans, HomMat2D)</l>
<c>    * 更新结果</c>
<l>    get_contour_xld (Contour_Trans, Y_Trans, X_Trans)</l>
<l>    set_grayval (Title_MapX_Adjust, Rows, Columns, X_Trans)</l>
<l>    set_grayval (Title_MapY_Adjust, Rows, Columns, Y_Trans)</l>
<l>endfor</l>
<c></c>
<l>reduce_domain (Title_MapX_Adjust, Title_MapX, Title_MapX_Adjust)</l>
<l>reduce_domain (Title_MapY_Adjust, Title_MapY, Title_MapY_Adjust)</l>
<c></c>
<l>return ()</l>
</body>
<docu id="Model3D_ReduceShake_Rough">
<parameters>
<parameter id="Title_MapX"/>
<parameter id="Title_MapX_Adjust"/>
<parameter id="Title_MapY"/>
<parameter id="Title_MapY_Adjust"/>
</parameters>
</docu>
</procedure>
<procedure name="Image_Merge">
<interface>
<io>
<par name="List_MapX" base_type="iconic" dimension="0"/>
<par name="List_MapY" base_type="iconic" dimension="0"/>
<par name="List_MapZ" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="Title_MapX" base_type="iconic" dimension="0"/>
<par name="Title_MapY" base_type="iconic" dimension="0"/>
<par name="Title_MapZ" base_type="iconic" dimension="0"/>
</oo>
</interface>
<body>
<l>count_obj (List_MapX, ListCount)</l>
<l>Title_OffsetX := []</l>
<l>List_Height := []</l>
<l>List_Width := []</l>
<l>for id := 1 to ListCount by 1</l>
<l>    select_obj (List_MapX, MapXSort, id)</l>
<l>    get_image_size (MapXSort, Width, Height)</l>
<c></c>
<l>    List_Width[id - 1] := Width + 5</l>
<l>    List_Height[id - 1] := Height</l>
<c></c>
<l>    if (id &gt; 1)</l>
<l>        Title_OffsetX[id - 1] := sum(List_Width[0:(id - 2)])</l>
<l>    else</l>
<l>        Title_OffsetX[id - 1] := 0</l>
<l>    endif</l>
<l>endfor</l>
<c></c>
<l>Zeros := gen_tuple_const(|List_Width|,0)</l>
<c></c>
<l>tile_images_offset (List_MapX, Title_MapX, Zeros, Title_OffsetX, Zeros, Zeros, List_Height, List_Width, sum(List_Width), Height)</l>
<l>tile_images_offset (List_MapY, Title_MapY, Zeros, Title_OffsetX, Zeros, Zeros, List_Height, List_Width, sum(List_Width), Height)</l>
<l>tile_images_offset (List_MapZ, Title_MapZ, Zeros, Title_OffsetX, Zeros, Zeros, List_Height, List_Width, sum(List_Width), Height)</l>
<l>return ()</l>
</body>
<docu id="Image_Merge">
<parameters>
<parameter id="List_MapX"/>
<parameter id="List_MapY"/>
<parameter id="List_MapZ"/>
<parameter id="Title_MapX"/>
<parameter id="Title_MapY"/>
<parameter id="Title_MapZ"/>
</parameters>
</docu>
</procedure>
</hdevelop>
